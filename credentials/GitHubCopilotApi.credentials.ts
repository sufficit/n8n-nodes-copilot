import {
  ICredentialType,
  INodeProperties,
  ICredentialTestRequest,
  IAuthenticateGeneric,
} from "n8n-workflow";

import { GITHUB_COPILOT_API } from "../shared/utils/GitHubCopilotEndpoints";

/**
 * GitHub Copilot API Token Credentials
 * ONLY GitHub CLI generated tokens work with GitHub Copilot API
 * OAuth2 and Personal Access Tokens from GitHub website DO NOT work
 */

export class GitHubCopilotApi implements ICredentialType {
  name = "githubCopilotApi";

  displayName = "GitHub Copilot API (GitHub CLI Token)";

  documentationUrl =
    "https://docs.github.com/en/copilot/github-copilot-chat/copilot-chat-in-ides/using-github-copilot-chat-in-your-ide";

  properties: INodeProperties[] = [
    {
      displayName: "‚ö†Ô∏è IMPORTANT: GitHub CLI Token Required",
      name: "warningNotice",
      type: "notice",
      default: "",
    },
    {
      displayName: "üöÄ Don't have GitHub CLI installed?",
      name: "helperNotice1",
      type: "notice",
      default: "Use the visual 'GitHub Copilot Auth Helper' node to generate your token without touching the terminal!",
    },
    {
      displayName: "üìù Step 1: Create Helper Workflow",
      name: "helperNotice2",
      type: "notice",
      default: "Add a new workflow and insert the 'GitHub Copilot Auth Helper' trigger node.",
    },
    {
      displayName: "‚ñ∂Ô∏è Step 2: Activate & Access",
      name: "helperNotice3",
      type: "notice",
      default: "Activate the workflow, then click 'Test workflow' to open the visual token generator in your browser.",
    },
    {
      displayName: "üìã Step 3: Copy Token",
      name: "helperNotice4",
      type: "notice",
      default: "Follow the on-screen instructions to authenticate with GitHub and copy the generated 'gho_' token back here.",
    },
    {
      displayName: "GitHub CLI Token",
      name: "token",
      type: "string",
      typeOptions: {
        password: true,
      },
      default: "",
      required: true,
      description:
				"Token generated by GitHub CLI (starts with 'gho_'). Use the Auth Helper node above for easy generation, or run in terminal: gh auth login && gh auth token",
      placeholder: "gho_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    },
  ];

  authenticate: IAuthenticateGeneric = {
    type: "generic",
    properties: {
      headers: {
        Authorization: "=Bearer {{$credentials.token}}",
        Accept: "application/json",
        "Content-Type": "application/json",
      },
    },
  };

  test: ICredentialTestRequest = {
    request: {
      baseURL: GITHUB_COPILOT_API.BASE_URL,
      url: GITHUB_COPILOT_API.ENDPOINTS.MODELS,
      method: "GET",
    },
  };
}
