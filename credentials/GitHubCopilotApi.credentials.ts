import {
  ICredentialType,
  INodeProperties,
  ICredentialTestRequest,
  IHttpRequestOptions,
  ICredentialDataDecryptedObject,
} from "n8n-workflow";

import { GITHUB_COPILOT_API } from "../shared/utils/GitHubCopilotEndpoints";
import { OAuthTokenManager } from "../shared/utils/OAuthTokenManager";

/**
 * GitHub Copilot API Token Credentials
 * Automatically generates and refreshes OAuth tokens from GitHub CLI token (gho_*)
 */

export class GitHubCopilotApi implements ICredentialType {
  name = "githubCopilotApi";

  displayName = "GitHub Copilot API (GitHub CLI Token)";

  documentationUrl =
    "https://docs.github.com/en/copilot/github-copilot-chat/copilot-chat-in-ides/using-github-copilot-chat-in-your-ide";

  properties: INodeProperties[] = [
    {
      displayName: "Setup Instructions",
      name: "setupNotice",
      type: "notice",
      default:
        "<strong>‚ÑπÔ∏è Auto OAuth Token Generation</strong><br>" +
        "Your GitHub CLI token will be used to automatically generate OAuth tokens. Tokens are cached and refreshed automatically before expiration (every ~20 minutes). No manual intervention needed!<br><br>" +
        
        "<strong>‚ö†Ô∏è IMPORTANT: GitHub CLI Token Required</strong><br><br>" +
        
        "<strong>üöÄ Don't have GitHub CLI installed?</strong><br>" +
        "Use the visual 'GitHub Copilot Auth Helper' node to generate your token without touching the terminal!<br><br>" +
        
        "<strong>üìù Step 1: Create Helper Workflow</strong><br>" +
        "Add a new workflow and insert the 'GitHub Copilot Auth Helper' trigger node.<br><br>" +
        
        "<strong>‚ñ∂Ô∏è Step 2: Activate & Access</strong><br>" +
        "Activate the workflow, then click 'Test workflow' to open the visual token generator in your browser.<br><br>" +
        
        "<strong>üìã Step 3: Copy Token</strong><br>" +
        "Follow the on-screen instructions to authenticate with GitHub and copy the generated 'gho_' token back here.",
    },
    {
      displayName: "GitHub CLI Token",
      name: "token",
      type: "string",
      typeOptions: {
        password: true,
      },
      default: "",
      required: true,
      description:
        "Token generated by GitHub CLI (starts with 'gho_'). OAuth tokens will be auto-generated and refreshed from this token.",
      placeholder: "gho_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    },
  ];

  async authenticate(
    credentials: ICredentialDataDecryptedObject,
    requestOptions: IHttpRequestOptions,
  ): Promise<IHttpRequestOptions> {
    // Validate GitHub token
    const githubToken = credentials.token as string;
    
    if (!githubToken) {
      throw new Error("GitHub CLI token is required");
    }
    
    if (!githubToken.startsWith("gho_")) {
      throw new Error("Invalid token format. GitHub CLI token must start with 'gho_'");
    }

    // Auto-generate OAuth token from GitHub CLI token
    let authToken: string;
    try {
      authToken = await OAuthTokenManager.getValidOAuthToken(githubToken);
    } catch (error) {
      throw new Error(
        `Failed to generate OAuth token: ${error instanceof Error ? error.message : String(error)}`,
      );
    }

    // Set authorization header
    if (!requestOptions.headers) {
      requestOptions.headers = {};
    }
    requestOptions.headers.Authorization = `Bearer ${authToken}`;
    requestOptions.headers.Accept = "application/json";
    requestOptions.headers["Content-Type"] = "application/json";

    return requestOptions;
  }

  test: ICredentialTestRequest = {
    request: {
      baseURL: GITHUB_COPILOT_API.BASE_URL,
      url: GITHUB_COPILOT_API.ENDPOINTS.MODELS,
      method: "GET",
      headers: {
        "User-Agent": "GitHub-Copilot/1.0 (n8n-node)",
        "Editor-Version": "vscode/1.95.0",
        "Editor-Plugin-Version": "copilot/1.0.0",
      },
    },
  };
}
