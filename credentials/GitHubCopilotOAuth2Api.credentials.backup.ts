import {
  ICredentialType,
  INodeProperties,
  ICredentialTestRequest,
  IAuthenticateGeneric,
} from "n8n-workflow";

import { GITHUB_COPILOT_API } from "../shared/utils/GitHubCopilotEndpoints";

/**
 * GitHub Copilot Token Credentials with OAuth2 Device Flow Helper
 * Simplified interface with guided token generation
 */

export class GitHubCopilotOAuth2Api implements ICredentialType {
  name = "githubCopilotOAuth2Api";

  displayName = "GitHub Copilot OAuth2 (with Helper)";

  documentationUrl =
    "https://docs.github.com/en/copilot/github-copilot-chat/copilot-chat-in-ides/using-github-copilot-chat-in-your-ide";

  properties: INodeProperties[] = [
    {
      displayName: "üéØ GitHub Copilot OAuth Helper",
      name: "authNotice",
      type: "notice",
      default: "",
      description: `<strong>üöÄ Easy Token Generation:</strong><br/>
			1. Run the helper script: <code>node get-copilot-token.js</code><br/>
			2. Follow the Device Flow OAuth in your browser<br/>
			3. Copy the generated token below<br/><br/>
			<em>The script handles all OAuth complexity automatically!</em>`,
    },
    {
      displayName: "Authentication Method",
      name: "authMethod",
      type: "options",
      options: [
        {
          name: "Manual Token (Paste from Script)",
          value: "manual",
          description: "Paste token generated by get-copilot-token.js script",
        },
        {
          name: "Device Flow OAuth (Interactive)",
          value: "deviceFlow",
          description: "Generate Device Flow code for manual authorization",
        },
      ],
      default: "manual",
    },
    {
      displayName: "GitHub Copilot Token",
      name: "token",
      type: "string",
      typeOptions: {
        password: true,
      },
      default: "",
      required: true,
      displayOptions: {
        show: {
          authMethod: ["manual"],
        },
      },
      description:
				"üîë Paste the token generated by <code>get-copilot-token.js</code> script (format: gho_*)",
      placeholder: "gho_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
    },
    {
      displayName: "üîß Device Flow Setup",
      name: "deviceFlowSetup",
      type: "notice",
      default: "",
      displayOptions: {
        show: {
          authMethod: ["deviceFlow"],
        },
      },
      description: `<strong>ÔøΩ Device Flow Configuration:</strong><br/>
			Client ID: <code>01ab8ac9400c4e429b23</code><br/>
			Scopes: <code>repo user:email</code><br/><br/>
			<strong>üåê Manual Steps:</strong><br/>
			1. Go to: <a href="https://github.com/login/device" target="_blank">https://github.com/login/device</a><br/>
			2. Use Client ID: 01ab8ac9400c4e429b23<br/>
			3. Enter the 8-character code generated below<br/>
			4. Authorize the application<br/>
			5. Get your token and paste it in Manual Token field`,
    },
    {
      displayName: "Generate Device Code",
      name: "generateCode",
      type: "button",
      typeOptions: {
        action: {
          type: "generateDeviceCode",
          displayName: "üé≤ Generate 8-Character Code",
        },
      },
      default: "",
      displayOptions: {
        show: {
          authMethod: ["deviceFlow"],
        },
      },
      description: "Click to generate an 8-character code for Device Flow OAuth",
    },
    {
      displayName: "Device Code",
      name: "deviceCode",
      type: "string",
      default: "",
      displayOptions: {
        show: {
          authMethod: ["deviceFlow"],
        },
      },
      description: "üî§ 8-character code for GitHub Device Flow (generated automatically)",
      placeholder: "ABCD-EFGH",
    },
    {
      displayName: "Verification URL",
      name: "verificationUrl",
      type: "string",
      default: "https://github.com/login/device",
      displayOptions: {
        show: {
          authMethod: ["deviceFlow"],
        },
      },
      description: "üåê URL to authorize the application",
    },
  ];

  authenticate: IAuthenticateGeneric = {
    type: "generic",
    properties: {
      headers: {
        Authorization: "=Bearer {{$credentials.token}}",
        Accept: "application/json",
        "Content-Type": "application/json",
        "User-Agent": "GitHub-Copilot-Chat/1.0.0 VSCode/1.85.0",
        "Editor-Version": "vscode/1.85.0",
        "Editor-Plugin-Version": "copilot-chat/0.12.0",
        "X-GitHub-Api-Version": "2025-04-01",
      },
    },
  };

  test: ICredentialTestRequest = {
    request: {
      baseURL: GITHUB_COPILOT_API.BASE_URL,
      url: GITHUB_COPILOT_API.ENDPOINTS.MODELS,
      method: "GET",
    },
  };
}
